#!/bin/env python
from os import listdir
from os.path import isfile, join, exists
import shutil
import os
import json
import argparse
import subprocess

JOB_FILE_EXT = ".job"
JOB_COMPOSER_DIR = "job_composer"


class JobFile:
    def __init__(self, name, path, last_modified_time):
        self.name = name
        self.path = path
        self.last_modified = last_modified_time

def get_job_composer_path():
    username = os.environ['USER']
    scratch = os.path.join("/scratch","user")
    return os.path.join(scratch, username, JOB_COMPOSER_DIR)

def list_job_files(dirpath):
    # assume the job file has the same name as job folder
    job_files = [os.path.join(dirpath, dir, dir + JOB_FILE_EXT) for dir in listdir(dirpath)]

    job_files = [f for f in job_files if isfile(f)]
    return job_files

def get_available_job_files():
    job_composer_dir = get_job_composer_path()
    job_files = list_job_files(job_composer_dir)

    job_file_objs = []
    for job_path in job_files:
        file_name = os.path.basename(job_path)
        last_modified_time = os.path.getmtime(job_path)
        job_file = JobFile(file_name, job_path, last_modified_time)
        job_file_objs.append(job_file)

    json_data = json.dumps([ob.__dict__ for ob in job_file_objs])
    print('{ "data": ' + json_data + '}')

def delete_job_files(file_name):
    job_composer_dir = get_job_composer_path()
    job_dir_name = os.path.splitext(file_name)[0]

    job_dir = os.path.join(job_composer_dir, job_dir_name)
    if exists(job_dir):
        shutil.rmtree(job_dir)
        print("Removed " + file_path)
    else:
        print("File does not exist.")
        exit(1)

def submit_job_file(file_name):
    job_composer_dir = get_job_composer_path()
    job_dir = os.path.splitext(file_name)[0]
    file_path = os.path.join(job_composer_dir, job_dir, file_name)

    if exists(file_path):
        output=subprocess.check_output(["/sw/local/bin/sbatch", file_path])
        print(output)
    else:
        print("File does not exist.")
        exit(1)

def main():
    # create parser object 
    parser = argparse.ArgumentParser(description = "Job Submit Helper") 

    # defining arguments for parser object 
    parser.add_argument("-j", "--jobfiles", action='store_true',
                        help = "List all job files inside job composer directory.")

    parser.add_argument("-d", "--delete", nargs = 1, 
                        type = str, metavar = "file_name", default = None, 
                        help = "Delete job file with given name.")

    parser.add_argument("-s", "--submit", nargs = 1, 
                        type = str, metavar=('job_file'), default = None, 
                        help = "Submit job file using the job scheduler on this machine")

     # parse the arguments from standard input 
    args = parser.parse_args() 

    # calling functions depending on type of argument 
    if args.jobfiles == True: 
        get_available_job_files()
        exit(0)
    elif args.delete != None:
        delete_job_files(args.delete[0])
        exit(0)
    elif args.submit != None:
        submit_job_file(args.submit[0])
    
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
